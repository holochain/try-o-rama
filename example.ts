orchestrator.registerScenario('invalid instance', async s => {
  const conductorConfig = {
    // yaml info
  }
  const initialization = [
    {
      id: 'holo-hosting',
      agentId: 'holo-hosting-agent',
      dnas: [
        {
          path: 'path/to/hha.dna.gz',
          nick: 'hosting:hha',  // TODO: this could be autogenerated
          properties: {},
          // membrane_proof: Buffer.alloc(0),
        },
        {
          path: 'path/to/holofuel.dna.gz',
          nick: 'hosting:holofuel',  // TODO: this could be autogenerated
          properties: {},
          // membrane_proof: Buffer.alloc(0),
        }
      ]
    },
    {
      id: 'self-hosted-chat-1',
      agentId: 'holo-hosting-agent',  // NB: same agent
      dnas: [
        {
          nick: 'hosting:chat',  // TODO: this could be autogenerated
          path: 'path/to/elemental-chat.dna.gz',
          properties: {},
          // membrane_proof: Buffer.alloc(0),
        }
      ]
    },
    {
      id: 'self-hosted-chat-2',
      agentId: 'another-agent',  // NB: different agent
      dnas: [
        {
          nick: 'another:chat',  // TODO: this could be autogenerated
          path: 'path/to/elemental-chat.dna.gz',
          properties: {},
          // membrane_proof: Buffer.alloc(0),
        }
      ]
    },
  ]

  // this is sugar, where the key becomes the playerName (as it was before)
  const playerConfigs1 = {
    hp1: conductorConfig,
    hp2: conductorConfig,
    hp3: conductorConfig,
  }

  const playerConfigs2 = {
    hp4: conductorConfig,
    hp5: conductorConfig,
  }

  // initialize 3 players, spawn them with an initialization
  const { hp1, hp2, hp3 } = await s.players(playerConfigs1, initialization)

  // create two players, unspawned
  const { hp4, hp5 } = await s.players(playerConfigs2, false)

  // Start up hp4 with no Apps installed
  await hp4.spawn()
  // and install a set of happs creating agent keys
  await hp4.initializeApps(initialization)

  // Start up hp4 with no Apps installed
  await hp5.spawn()
  // Install a single app with a custom agent key
  const agent_key: AgentPubKey = get_key_from_somewhere()
  await hp5.installApp(agent_key, initialization[0])
})
